getwd()
t<-read.table("Price.txt")
t<-read.table("Price.txt",sep = ",")
path = "C:\\Users\\Administrator\\Desktop\\test"
path = "d:\Documents\wuhaoyu\桌面\广深佛东四城数据"
path = "d:\\Documents\\wuhaoyu\\桌面\\广深佛东四城数据"
fileName = dir(path)
for(i in 1:length(fileName)){
docpath = paste(path,fileName[i],sep = "\\")
docfileName = dir(docpath)
data = read.csv(file = paste(docpath,docfileName,sep = "\\") ,
header = T,stringsAsFactors = F)
}
for(i in 1:length(fileName)){
docpath = paste(path,fileName[i],sep = "\\")
docfileName = dir(docpath)
data = read.csv(file = paste(docpath,docfileName,sep = "\\"),
header = T,stringsAsFactors = F)
}
path = "d:\\Documents\\wuhaoyu\\桌面\\广深佛东四城数据"
fileName = dir(path)
for(i in 1:length(fileName)){
docpath = paste(path,fileName[i],sep = "\\")
docfileName = dir(docpath)
data = read.csv(file = paste(docpath,docfileName,sep = "\\"),
header = T,stringsAsFactors = F)
}
length(fileName)
path = "d:\\Documents\\wuhaoyu\\桌面\\广深佛东四城数据"
fileName = dir(path)
for(i in 1:length(fileName)){
docpath = paste(path,fileName[i],sep = "\\")
docfileName = dir(docpath)
data = read.csv(file = paste(docpath,docfileName,sep = "\\"),
header = T,stringsAsFactors = F)
}
rm(list=ls())
setwd('d:\\Documents\\wuhaoyu\\桌面\\daguan')
library(corrplot)
library(xgboost)
library(caret)
library(car)
library(psych)
library(pROC)
library(Matrix)
data <- read.csv('all_after_preprocess.csv', header=TRUE)
View(data)
View(data)
isna(data$Attrition)
train_data = data[which(data$Attrition!=NA),]
test_data = data[-which(data$Attrition==NA)t,]
test_data = data[-which(data$Attrition==NA),]
data <- read.csv('all_after_preprocess.csv', header=TRUE)
train_data = data[which(data$Attrition!=NA),]
test_data = data[-which(data$Attrition==NA),]
View(test_data)
train_data = data[which(data$Attrition is NA),]
train_data = data[which(data$Attrition = NA),]
train_data = data[which(data$Attrition==NA),]
train_data = data[which(is.null(data$Attrition),]
train_data = data[which(is.null(data$Attrition)),]
train_data = data[which(is.null(data$Attrition)==True),]
train_data = data[which(is.null(data$Attrition)==TRUE),]
is.null(data$Attrition)
train_data = data[which(is.na(data$Attrition)),]
test_data = data[which(is.na(data$Attrition)),]
train_data = data[-which(is.na(data$Attrition)),]
test_data = data[which(is.na(data$Attrition)),]
total_model = glm(formula =
Attrition ~
.,
data = train_df,
family = binomial)
total_model = glm(formula =
Attrition ~
.,
data = train_data,
family = binomial)
total_model_step <- step(total_model,direction = 'both')
fitted.results <- predict(model,test_data,interval="confidence")
fitted.results <- predict(total_model_step,test_data,interval="confidence")
fitted.results <- ifelse(fitted.results>0,1,0)
View(fitted.results)
sum(fitted.results)
data <- read.csv('all_after_preprocess.csv', header=TRUE)
train_data = data[-which(is.na(data$Attrition)),]
test_data = data[which(is.na(data$Attrition)),]
total_model = glm(formula =
Attrition ~
.,
data = train_data,
family = binomial("logit"))
total_model_step <- step(total_model,direction = 'both')
summary(total_model_step)
fitted.results <- predict(total_model_step,test_data)
View(fitted.results)
fitted.results <- ifelse(fitted.results>0.5,1,0)
sum(fitted.results)
View(train_data)
rm(list=ls())
setwd('d:\\Documents\\wuhaoyu\\桌面\\daguan')
library(corrplot)
library(xgboost)
library(caret)
library(car)
library(psych)
library(pROC)
library(Matrix)
data <- read.csv('all_after_preprocess.csv', header=TRUE)
View(data)
rm(list=ls())
setwd('d:\\Documents\\wuhaoyu\\桌面\\daguan')
library(corrplot)
library(xgboost)
library(caret)
library(car)
library(psych)
library(pROC)
library(Matrix)
data <- read.csv('all_after_preprocess.csv', header=TRUE)
train_data = data[-which(is.na(data$Attrition)),]
test_data = data[which(is.na(data$Attrition)),]
total_model = glm(formula =
Attrition ~
.,
data = train_data,
family = binomial("logit"))
total_model_step <- step(total_model,direction = 'both')
summary(total_model_step)
fitted.results <- predict(total_model_step,test_data)
View(fitted.results)
total_model = glm(formula =
Attrition ~
.,
data = train_data,
family = binomial(link ="logit"))
total_model_step <- step(total_model,direction = 'both')
summary(total_model_step)
View(test_data)
test_data = test_data[,-2]
View(test_data)
fitted.results <- predict(total_model_step,test_data)
View(fitted.results)
rm(list=ls())
setwd('d:\\Documents\\wuhaoyu\\桌面\\daguan')
library(corrplot)
library(xgboost)
library(caret)
library(car)
library(psych)
library(pROC)
library(Matrix)
data <- read.csv('all_after_preprocess.csv', header=TRUE)
View(data)
data$Attrition <- as.factor(data$Attrition)
train_data = data[-which(is.na(data$Attrition)),]
test_data = data[which(is.na(data$Attrition)),]
test_data = test_data[,-2]
total_model = glm(formula =
Attrition ~
.,
data = train_data,
family = binomial(link ="logit"))
total_model_step <- step(total_model,direction = 'both')
fitted.results <- predict(total_model_step,test_data)
fitted.results <- ifelse(fitted.results>0.5,1,0)
View(fitted.results)
fitted.results <- predict(total_model_step,test_data)
View(fitted.results)
str(data)
describe(data)
rm(list=ls())
setwd('d:\\Documents\\wuhaoyu\\桌面\\daguan')
library(corrplot)
library(xgboost)
library(caret)
library(car)
library(psych)
library(pROC)
library(Matrix)
data <- read.csv('all_after_preprocess.csv', header=TRUE)
str(data)
rm(list=ls())
setwd('d:\\Documents\\wuhaoyu\\桌面\\daguan')
library(corrplot)
library(xgboost)
library(caret)
library(car)
library(psych)
library(pROC)
library(Matrix)
data <- read.csv('all_after_preprocess.csv', header=TRUE)
str(data)
train_data <- read.csv('train_after_preprocess.csv', header=TRUE)
View(train_data)
names(train)
names(train_data)
View(data)
rm(list=ls())
setwd('d:\\Documents\\wuhaoyu\\桌面\\daguan')
library(pROC)
set.seed(1234)
# 数据集准备
data <- read.csv('pfm_train.csv', header=TRUE)
str(data)
data$Attrition<-as.factor(data$Attrition)
data$EmployeeNumber <- as.character(data$EmployeeNumber)
names(data)[1]='Age'
select<-sample(1:nrow(data), length(data$EmployeeNumber)*0.7, replace=FALSE)
data['MonthlyIncome'] = log(data['MonthlyIncome'])
data['YearsSinceLastPromotion'] = log(data['YearsSinceLastPromotion']+1)
train_df = data[select,]
test_df = data[-select,]
# 不变变量
constant_var <- c("StandardHours", "Over18")
# 高相关变量
high_cor_var <- c("JobLevel","TotalWorkingYears","YearsAtCompany","YearsWithCurrManager", "PerformanceRating","PercentSalaryHike")
# 分类变量
char_var <- c("BusinessTravel", "Department", "EducationField","Gender", "JobRole","MaritalStatus", "OverTime")
# 数据变量W
num_var <- colnames(train_df)[-which(colnames(train_df)%in%c(constant_var,char_var))]
# fitler var
filter_var <- colnames(train_df)[-which(colnames(train_df)%in%c(constant_var,char_var,high_cor_var))]
# 逐步回归
total_model = glm(formula =
Attrition ~
Age+
BusinessTravel+
Department+
DistanceFromHome+
Education+
EducationField+
EnvironmentSatisfaction+
Gender+
JobInvolvement+
JobRole+
JobSatisfaction+
MaritalStatus+
MonthlyIncome+
NumCompaniesWorked+
OverTime+
RelationshipSatisfaction+
StockOptionLevel+
TrainingTimesLastYear+
WorkLifeBalance+
YearsInCurrentRole+
YearsSinceLastPromotion,
data = train_df,
family = binomial)
total_model_step <- step(total_model,direction = 'both')
summary(total_model_step)
rm(list=ls())
setwd('d:\\Documents\\wuhaoyu\\桌面\\daguan')
library(pROC)
set.seed(1234)
# 数据集准备
data <- read.csv('pfm_train.csv', header=TRUE)
str(data)
data$Attrition<-as.factor(data$Attrition)
data$EmployeeNumber <- as.character(data$EmployeeNumber)
names(data)[1]='Age'
select<-sample(1:nrow(data), length(data$EmployeeNumber), replace=FALSE)
data['MonthlyIncome'] = log(data['MonthlyIncome'])
data['YearsSinceLastPromotion'] = log(data['YearsSinceLastPromotion']+1)
train_df = data[select,]
test_df = data[-select,]
# 逐步回归
total_model = glm(formula =
Attrition ~
Age+
BusinessTravel+
Department+
DistanceFromHome+
Education+
EducationField+
EnvironmentSatisfaction+
Gender+
JobInvolvement+
JobRole+
JobSatisfaction+
MaritalStatus+
MonthlyIncome+
NumCompaniesWorked+
OverTime+
RelationshipSatisfaction+
StockOptionLevel+
TrainingTimesLastYear+
WorkLifeBalance+
YearsInCurrentRole+
YearsSinceLastPromotion,
data = train_df,
family = binomial)
summary(total_model)
total_model_step <- step(total_model,direction = 'both')
summary(total_model_step)
describe(model)
data['MonthlyIncome'] = log(data['MonthlyIncome'])
data['YearsSinceLastPromotion'] = log(data['YearsSinceLastPromotion']+1)
train_df = data[select,]
test_df = data[-select,]
# 逐步回归
total_model = glm(formula =
Attrition ~
Age+
BusinessTravel+
Department+
DistanceFromHome+
Education+
EducationField+
EnvironmentSatisfaction+
Gender+
JobInvolvement+
JobRole+
JobSatisfaction+
MaritalStatus+
MonthlyIncome+
NumCompaniesWorked+
OverTime+
RelationshipSatisfaction+
StockOptionLevel+
TrainingTimesLastYear+
WorkLifeBalance+
YearsInCurrentRole+
YearsSinceLastPromotion,
data = train_df,
family = binomial)
summary(total_model)
total_model_step <- step(total_model,direction = 'both')
summary(total_model_step)
summary(total_model_step)
describe(total_model)
